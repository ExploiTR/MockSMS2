package app.exploitr.mocksms2.data;

import android.content.Context;
import android.content.SharedPreferences;
import android.provider.Telephony;

import java.security.SecureRandom;
import java.util.Locale;

import app.exploitr.mocksms2.addon.CountryCodeUtil;

public class PrefMan {
    private static final String PREF_NAME = "MyPrefs";
    private static final String KEY_IS_NEW_USER = "isNewUser";
    private static final String KEY_IS_PERSISTENT_MODE = "isPersistentMode";
    private static final String KEY_IS_SMS_READ = "isSmsRead";
    private static final String KEY_IS_SMS_SEEN = "isSmsSeen";
    private static final String KEY_IS_SMS_DELIVERED = "isSmsDelivered";
    private static final String KEY_IS_REPLY_PATH_PRESENT = "isReplyPathPresent";
    private static final String KEY_IS_STATUS_SETTINGS_ENABLED = "isStatusSettingsEnabled";
    private static final String KEY_IS_SIM_SLOT_SETTINGS_ENABLED = "isSimSlotSettingsEnabled";
    private static final String KEY_IS_IMSI_SETTINGS_ENABLED = "isImsiSettingsEnabled";
    private static final String KEY_IS_SERVICE_CENTER_SETTINGS_ENABLED = "isServiceCenterSettingsEnabled";
    private static final String KEY_IS_TIME_DIFFERENCE_ENABLED = "isTimeDifferenceEnabled";
    private static final String KEY_SMS_STATUS = "smsStatus";
    private static final String KEY_SIM_SLOT = "simSlot";
    private static final String KEY_SIM_IMSI = "simImsi";
    private static final String KEY_SERVICE_CENTER_NUMBER = "serviceCenterNumber";
    private static final String KEY_TIME_DIFFERENCE = "timeDifference";

    private static PrefMan instance;
    private final SharedPreferences sharedPreferences;
    private final SharedPreferences.Editor editor;

    private PrefMan(Context context) {
        sharedPreferences = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);
        editor = sharedPreferences.edit();
    }

    public static synchronized PrefMan getInstance(Context context) {
        if (instance == null) {
            instance = new PrefMan(context.getApplicationContext());
        }
        return instance;
    }

    public boolean isNewUser() {
        return sharedPreferences.getBoolean(KEY_IS_NEW_USER, true);
    }

    public void setNewUser(boolean isNewUser) {
        editor.putBoolean(KEY_IS_NEW_USER, isNewUser);
        editor.apply();
    }

    public boolean isPersistentMode() {
        return sharedPreferences.getBoolean(KEY_IS_PERSISTENT_MODE, false);
    }

    public void setPersistentMode(boolean isPersistentMode) {
        editor.putBoolean(KEY_IS_PERSISTENT_MODE, isPersistentMode);
        editor.apply();
    }

    public boolean isSmsRead() {
        return sharedPreferences.getBoolean(KEY_IS_SMS_READ, false);
    }

    public void setSmsRead(boolean isSmsRead) {
        editor.putBoolean(KEY_IS_SMS_READ, isSmsRead);
        editor.apply();
    }

    public boolean isSmsSeen() {
        return sharedPreferences.getBoolean(KEY_IS_SMS_SEEN, false);
    }

    public void setSmsSeen(boolean isSmsSeen) {
        editor.putBoolean(KEY_IS_SMS_SEEN, isSmsSeen);
        editor.apply();
    }

    public boolean isSmsDelivered() {
        return sharedPreferences.getBoolean(KEY_IS_SMS_DELIVERED, false);
    }

    public void setSmsDelivered(boolean isSmsDelivered) {
        editor.putBoolean(KEY_IS_SMS_DELIVERED, isSmsDelivered);
        editor.apply();
    }

    public boolean isReplyPathPresent() {
        return sharedPreferences.getBoolean(KEY_IS_REPLY_PATH_PRESENT, false);
    }

    public void setReplyPathPresent(boolean isReplyPathPresent) {
        editor.putBoolean(KEY_IS_REPLY_PATH_PRESENT, isReplyPathPresent);
        editor.apply();
    }

    public boolean isStatusSettingsEnabled() {
        return sharedPreferences.getBoolean(KEY_IS_STATUS_SETTINGS_ENABLED, false);
    }

    public void setStatusSettingsEnabled(boolean isStatusSettingsEnabled) {
        editor.putBoolean(KEY_IS_STATUS_SETTINGS_ENABLED, isStatusSettingsEnabled);
        editor.apply();
    }

    public boolean isSimSlotSettingsEnabled() {
        return sharedPreferences.getBoolean(KEY_IS_SIM_SLOT_SETTINGS_ENABLED, false);
    }

    public void setSimSlotSettingsEnabled(boolean isSimSlotSettingsEnabled) {
        editor.putBoolean(KEY_IS_SIM_SLOT_SETTINGS_ENABLED, isSimSlotSettingsEnabled);
        editor.apply();
    }

    public boolean isImsiSettingsEnabled() {
        return sharedPreferences.getBoolean(KEY_IS_IMSI_SETTINGS_ENABLED, false);
    }

    public void setImsiSettingsEnabled(boolean isImsiSettingsEnabled) {
        editor.putBoolean(KEY_IS_IMSI_SETTINGS_ENABLED, isImsiSettingsEnabled);
        editor.apply();
    }

    public boolean isServiceCenterSettingsEnabled() {
        return sharedPreferences.getBoolean(KEY_IS_SERVICE_CENTER_SETTINGS_ENABLED, false);
    }

    public void setServiceCenterSettingsEnabled(boolean isServiceCenterSettingsEnabled) {
        editor.putBoolean(KEY_IS_SERVICE_CENTER_SETTINGS_ENABLED, isServiceCenterSettingsEnabled);
        editor.apply();
    }

    public boolean isTimeDifferenceEnabled() {
        return sharedPreferences.getBoolean(KEY_IS_TIME_DIFFERENCE_ENABLED, false);
    }

    public void setTimeDifferenceEnabled(boolean isTimeDifferenceEnabled) {
        editor.putBoolean(KEY_IS_TIME_DIFFERENCE_ENABLED, isTimeDifferenceEnabled);
        editor.apply();
    }

    public int getSmsStatus() {
        return sharedPreferences.getInt(KEY_SMS_STATUS, Telephony.Sms.STATUS_NONE);
    }

    public void setSmsStatus(int smsStatus) {
        if (smsStatus == Telephony.Sms.STATUS_NONE || smsStatus == Telephony.Sms.STATUS_PENDING || smsStatus == Telephony.Sms.STATUS_FAILED || smsStatus == Telephony.Sms.STATUS_COMPLETE) {
            editor.putInt(KEY_SMS_STATUS, smsStatus);
            editor.apply();
        }
    }

    public int getSimSlot() {
        return sharedPreferences.getInt(KEY_SIM_SLOT, 0);
    }

    public void setSimSlot(int simSlot) {
        editor.putInt(KEY_SIM_SLOT, simSlot);
        editor.apply();
    }

    public String getSimImsi() {
        return sharedPreferences.getString(KEY_SIM_IMSI, String.format(Locale.ENGLISH, "%016d", Math.abs(new SecureRandom().nextLong()) % 10000000000000000L));
    }

    public void setSimImsi(String sim_Imsi) {
        editor.putString(KEY_SIM_IMSI, sim_Imsi);
        editor.apply();
    }

    public String getServiceCenterNumber(Context context) {
        return sharedPreferences.getString(KEY_SERVICE_CENTER_NUMBER, CountryCodeUtil.getCurrentCountryCode(context) +
                (long) (Math.abs(new SecureRandom().nextDouble()) * 9_000_000_000L) + 1_000_000_000L);
    }

    public void setServiceCenterNumber(String serviceCenterNumber) {
        editor.putString(KEY_SERVICE_CENTER_NUMBER, serviceCenterNumber);
        editor.apply();
    }

    public int getTimeDifference() {
        return sharedPreferences.getInt(KEY_TIME_DIFFERENCE, 0);
    }

    public void setTimeDifference(int timeDifference) {
        editor.putInt(KEY_TIME_DIFFERENCE, timeDifference);
        editor.apply();
    }

    public void clearSimSlot() {
        editor.remove(KEY_SIM_SLOT);
        editor.apply();
    }

    public void clearSmsStatus() {
        editor.remove(KEY_SMS_STATUS);
        editor.apply();
    }

    public void clearSimImsi() {
        editor.remove(KEY_SIM_IMSI);
        editor.apply();
    }

    public void clearServiceCenterNumber() {
        editor.remove(KEY_SERVICE_CENTER_NUMBER);
        editor.apply();
    }

    public void clearTimeDifference() {
        editor.remove(KEY_TIME_DIFFERENCE);
        editor.apply();
    }

}



