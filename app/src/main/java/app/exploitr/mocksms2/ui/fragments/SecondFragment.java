package app.exploitr.mocksms2.ui.fragments;

import android.os.Bundle;
import android.provider.Telephony;
import android.text.Editable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.CompoundButton;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;

import java.util.Objects;

import app.exploitr.mocksms2.R;
import app.exploitr.mocksms2.data.PrefMan;
import app.exploitr.mocksms2.databinding.FragmentSecondBinding;

public class SecondFragment extends Fragment {

    private FragmentSecondBinding binding;
    private PrefMan prefMan;

    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        binding = FragmentSecondBinding.inflate(inflater, container, false);
        if (getContext() != null)
            prefMan = PrefMan.getInstance(getContext());
        return binding.getRoot();
    }

    public void onViewCreated(@NonNull View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        enable_preferences_save_get();
        enable_settings_toggle();
    }

    private void enable_preferences_save_get() {
        binding.enablePersistentSettings.setChecked(prefMan.isPersistentMode());
        binding.setSmsStatusRead.setChecked(prefMan.isSmsRead());
        binding.setSmsStatusSeen.setChecked(prefMan.isSmsSeen());
        binding.setSmsStatusDelivered.setChecked(prefMan.isSmsDelivered());
        binding.setReplyPathAvailable.setChecked(prefMan.isReplyPathPresent());
        binding.enableStatusSettings.setChecked(prefMan.isStatusSettingsEnabled());
        binding.enableSimSlotSettings.setChecked(prefMan.isSimSlotSettingsEnabled());
        binding.enableImsiSettings.setChecked(prefMan.isImsiSettingsEnabled());
        binding.enableServiceCenterSettings.setChecked(prefMan.isServiceCenterSettingsEnabled());
        binding.enableTimeDifferenceSettings.setChecked(prefMan.isTimeDifferenceEnabled());

        binding.enablePersistentSettings.setOnCheckedChangeListener((compoundButton, isChecked) -> prefMan.setPersistentMode(isChecked));
        binding.setSmsStatusRead.setOnCheckedChangeListener((compoundButton, isChecked) -> prefMan.setSmsRead(isChecked));
        binding.setSmsStatusSeen.setOnCheckedChangeListener((compoundButton, isChecked) -> prefMan.setSmsSeen(isChecked));
        binding.setSmsStatusDelivered.setOnCheckedChangeListener((compoundButton, isChecked) -> prefMan.setSmsDelivered(isChecked));
        binding.setReplyPathAvailable.setOnCheckedChangeListener((compoundButton, isChecked) -> prefMan.setReplyPathPresent(isChecked));

        binding.imsiContainer.setVisibility(prefMan.isImsiSettingsEnabled() ? View.VISIBLE : View.GONE);
        binding.serviceCenterContainer.setVisibility(prefMan.isServiceCenterSettingsEnabled() ? View.VISIBLE : View.GONE);
        binding.timeDiffContainer.setVisibility(prefMan.isTimeDifferenceEnabled() ? View.VISIBLE : View.GONE);
        binding.simSlotContainer.setVisibility(prefMan.isSimSlotSettingsEnabled() ? View.VISIBLE : View.GONE);
        binding.statusContainer.setVisibility(prefMan.isStatusSettingsEnabled() ? View.VISIBLE : View.GONE);

        ArrayAdapter<CharSequence> statusAdapter = ArrayAdapter.createFromResource(requireContext(), R.array.status_entries, android.R.layout.simple_spinner_item);
        statusAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        binding.selectSmsStatusInput.setAdapter(statusAdapter);

        binding.selectSmsStatusInput.setSelection(mapSmsStatus(prefMan.getSmsStatus()));

        binding.selectSmsStatusInput.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int position, long id) {
                prefMan.setSmsStatus(position);
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {
            }
        });

        binding.selectSimSlotInput.setText(String.valueOf(prefMan.getSimSlot()));
        binding.imsiTextInput.setText(prefMan.getSimImsi());
        binding.serviceCenterTextInput.setText(prefMan.getServiceCenterNumber(requireContext()));
        binding.timeDiffTextInput.setText(String.valueOf(prefMan.getTimeDifference()));

        binding.selectSimSlotInput.setOnFocusChangeListener((view, hasFocus) -> {
            if (!hasFocus) {
                String simSlotValue = Objects.requireNonNull(binding.selectSimSlotInput.getText()).toString();
                if (!simSlotValue.isEmpty()) {
                    int simSlot = Integer.parseInt(simSlotValue);
                    prefMan.setSimSlot(simSlot);
                }
            }
        });

        binding.imsiTextInput.setOnFocusChangeListener((view, hasFocus) -> {
            if (!hasFocus) {
                String imsiValue = Objects.requireNonNull(binding.imsiTextInput.getText()).toString();
                prefMan.setSimImsi(imsiValue);
            }
        });

        binding.serviceCenterTextInput.setOnFocusChangeListener((view, hasFocus) -> {
            if (!hasFocus) {
                String serviceCenterValue = Objects.requireNonNull(binding.serviceCenterTextInput.getText()).toString();
                prefMan.setServiceCenterNumber(serviceCenterValue);
            }
        });

        binding.timeDiffTextInput.setOnFocusChangeListener((view, hasFocus) -> {
            if (!hasFocus) {
                String timeDiffValue = Objects.requireNonNull(binding.timeDiffTextInput.getText()).toString();
                if (!timeDiffValue.isEmpty()) {
                    int timeDiff = Integer.parseInt(timeDiffValue);
                    prefMan.setTimeDifference(timeDiff);
                }
            }
        });
    }

    private void enable_settings_toggle() {
        binding.enableStatusSettings.setOnCheckedChangeListener(toggles());
        binding.enableImsiSettings.setOnCheckedChangeListener(toggles());
        binding.enableServiceCenterSettings.setOnCheckedChangeListener(toggles());
        binding.enableSimSlotSettings.setOnCheckedChangeListener(toggles());
        binding.enableTimeDifferenceSettings.setOnCheckedChangeListener(toggles());
    }

    private int mapSmsStatus(int status) {
        int mappedStatus;
        switch (status) {
            case Telephony.Sms.STATUS_COMPLETE:
                mappedStatus = 1;
                break;
            case Telephony.Sms.STATUS_PENDING:
                mappedStatus = 2;
                break;
            case Telephony.Sms.STATUS_FAILED:
                mappedStatus = 3;
                break;
            default:
                mappedStatus = 0; // STATUS_NONE
                break;
        }
        return mappedStatus;
    }

    private CompoundButton.OnCheckedChangeListener toggles() {
        return this::toggleInternal;
    }

    private void toggleInternal(CompoundButton buttonView, boolean isChecked) {
        if (buttonView.getId() == R.id.enable_imsi_settings) {
            binding.imsiContainer.setVisibility(isChecked ? View.VISIBLE : View.GONE);
            prefMan.setImsiSettingsEnabled(isChecked);
            if (!isChecked) prefMan.clearSimImsi();
        } else if (buttonView.getId() == R.id.enable_status_settings) {
            binding.statusContainer.setVisibility(isChecked ? View.VISIBLE : View.GONE);
            prefMan.setStatusSettingsEnabled(isChecked);
            if (!isChecked) prefMan.clearSmsStatus();
        } else if (buttonView.getId() == R.id.enable_service_center_settings) {
            binding.serviceCenterContainer.setVisibility(isChecked ? View.VISIBLE : View.GONE);
            prefMan.setServiceCenterSettingsEnabled(isChecked);
            if (!isChecked) prefMan.clearServiceCenterNumber();
        } else if (buttonView.getId() == R.id.enable_sim_slot_settings) {
            binding.simSlotContainer.setVisibility(isChecked ? View.VISIBLE : View.GONE);
            prefMan.setSimSlotSettingsEnabled(isChecked);
            if (!isChecked) prefMan.clearSimSlot();
        } else {
            binding.timeDiffContainer.setVisibility(isChecked ? View.VISIBLE : View.GONE);
            prefMan.setTimeDifferenceEnabled(isChecked);
            if (!isChecked) prefMan.clearTimeDifference();
        }
    }

    @Override
    public void onPause() {
        super.onPause();
        savePrefs();
    }

    private void savePrefs() {
        if (!prefMan.isPersistentMode()) return;
        Editable e;
        if ((e = binding.selectSimSlotInput.getText()) != null) {
            String string = e.toString();
            prefMan.setSimSlot(Integer.parseInt(string));
        }
        if ((e = binding.imsiTextInput.getText()) != null) {
            prefMan.setSimImsi(e.toString());
        }

        if ((e = binding.serviceCenterTextInput.getText()) != null) {
            prefMan.setServiceCenterNumber(e.toString());
        }

        if ((e = binding.timeDiffTextInput.getText()) != null) {
            prefMan.setTimeDifference(Integer.parseInt(e.toString()));
        }
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }

}