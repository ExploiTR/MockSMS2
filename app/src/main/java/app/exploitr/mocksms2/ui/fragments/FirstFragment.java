package app.exploitr.mocksms2.ui.fragments;

import android.app.Dialog;
import android.app.TimePickerDialog;
import android.os.Bundle;
import android.text.format.DateFormat;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AlphaAnimation;
import android.view.animation.AnimationSet;
import android.view.animation.TranslateAnimation;
import android.widget.TimePicker;

import androidx.annotation.NonNull;
import androidx.fragment.app.DialogFragment;
import androidx.fragment.app.Fragment;

import java.util.Calendar;

import app.exploitr.mocksms2.R;
import app.exploitr.mocksms2.databinding.FragmentFirstBinding;

public class FirstFragment extends Fragment {

    private FragmentFirstBinding binding;

    @Override
    public View onCreateView(
            @NonNull LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState) {
        binding = FragmentFirstBinding.inflate(inflater, container, false);
        return binding.getRoot();
    }

    public void onViewCreated(@NonNull View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        //  NavHostFragment.findNavController(FirstFragment.this).navigate(R.id.action_FirstFragment_to_SecondFragment);

        binding.modeSelectGroup.addOnButtonCheckedListener((group, checkedId, isChecked) -> animateAndSet(isChecked, checkedId));
        binding.pickButton.setOnClickListener(v -> {

        });
    }

    private void animateAndSet(boolean isChecked, int checkedId) {
        if (!isChecked)
            return;
        String hintText;
        if (checkedId == R.id.inbox_button)
            hintText = "Mode > Inbox";
        else if (checkedId == R.id.sent_button)
            hintText = "Mode > Sent";
        else if (checkedId == R.id.draft_button)
            hintText = "Mode > Draft";
        else if (checkedId == R.id.outbox_button)
            hintText = "Mode > Outbox";
        else if (checkedId == R.id.failed_button)
            hintText = "Mode > Failed";
        else if (checkedId == R.id.queued_button)
            hintText = "Mode > Queued";
        else
            hintText = "Unknown err!";

        binding.hintMode.setText(hintText);

        int[] toggleButtonGroupLocation = new int[2];
        binding.modeSelectGroup.getLocationOnScreen(toggleButtonGroupLocation);

        int[] textViewLocation = new int[2];
        binding.hintMode.getLocationOnScreen(textViewLocation);

        float yDelta = toggleButtonGroupLocation[1] - textViewLocation[1];

        AnimationSet animationSet = new AnimationSet(true);

        TranslateAnimation translateAnimation = new TranslateAnimation(0, 0, yDelta, 0);
        translateAnimation.setDuration(250);
        animationSet.addAnimation(translateAnimation);

        AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);
        alphaAnimation.setDuration(250);
        animationSet.addAnimation(alphaAnimation);

        binding.hintMode.startAnimation(animationSet);
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }

    private static class TimePickerFragment extends DialogFragment
            implements TimePickerDialog.OnTimeSetListener {

        @NonNull
        @Override
        public Dialog onCreateDialog(Bundle savedInstanceState) {
            // Use the current time as the default values for the picker
            final Calendar c = Calendar.getInstance();
            int hour = c.get(Calendar.HOUR_OF_DAY);
            int minute = c.get(Calendar.MINUTE);


            return new TimePickerDialog(getActivity(), this, hour, minute,
                    DateFormat.is24HourFormat(getActivity()));
        }

        public void onTimeSet(TimePicker view, int hourOfDay, int minute) {

        }
    }

}