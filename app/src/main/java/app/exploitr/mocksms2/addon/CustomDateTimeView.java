package app.exploitr.mocksms2.addon;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.LinearGradient;
import android.graphics.Paint;
import android.graphics.Shader;
import android.graphics.Typeface;
import android.util.AttributeSet;

import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.core.content.ContextCompat;
import androidx.core.content.res.ResourcesCompat;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

import app.exploitr.mocksms2.R;

public class CustomDateTimeView extends CardView {

    private static final int DEFAULT_WIDTH_DP = 110; // Default width in dp
    private static final int DEFAULT_HEIGHT_DP = 55; // Default height in dp

    private static final int DEFAULT_WIDTH = (int) (DEFAULT_WIDTH_DP * Resources.getSystem().getDisplayMetrics().density);
    private static final int DEFAULT_HEIGHT = (int) (DEFAULT_HEIGHT_DP * Resources.getSystem().getDisplayMetrics().density);

    private Paint hourPaint;
    private Paint minutePaint;
    private Paint colonPaint;
    private Paint am_pmPaint;
    private Paint datePaint;

    private String timeString;
    private String dateString;

    private int curHour;

    public CustomDateTimeView(Context context) {
        super(context);
        init();
    }

    public CustomDateTimeView(Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);
        init();
    }

    public CustomDateTimeView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init();
    }

    private void init() {
        Typeface typeface = ResourcesCompat.getFont(getContext(), R.font.montserratm);

        hourPaint = new Paint();
        hourPaint.setTextSize(60);
        hourPaint.setShader(new LinearGradient(0, 0, 60, 60, ContextCompat.getColor(getContext(), R.color.hour_color_start), ContextCompat.getColor(getContext(), R.color.hour_color_end), Shader.TileMode.MIRROR));
        hourPaint.setTypeface(typeface);

        minutePaint = new Paint();
        minutePaint.setTextSize(60);
        minutePaint.setShader(new LinearGradient(0, 0, 60, 60, ContextCompat.getColor(getContext(), R.color.minute_color_start), ContextCompat.getColor(getContext(), R.color.minute_color_end), Shader.TileMode.MIRROR));
        minutePaint.setTypeface(typeface);

        colonPaint = new Paint();
        colonPaint.setTextSize(60);
        colonPaint.setColor(ContextCompat.getColor(getContext(), R.color.colon_color));
        colonPaint.setTypeface(typeface);

        am_pmPaint = new Paint();
        am_pmPaint.setTextSize(30);
        am_pmPaint.setShader(new LinearGradient(0, 0, 60, 60, ContextCompat.getColor(getContext(), R.color.am_pm_color_start), ContextCompat.getColor(getContext(), R.color.am_pm_color_end), Shader.TileMode.MIRROR));
        am_pmPaint.setTypeface(typeface);

        datePaint = new Paint();
        datePaint.setTextSize(40);
        datePaint.setShader(new LinearGradient(0, 0, 60, 60, ContextCompat.getColor(getContext(), R.color.date_color_start), ContextCompat.getColor(getContext(), R.color.date_color_end), Shader.TileMode.MIRROR));
        datePaint.setTypeface(typeface);

        updateDateTime();
    }

    public void updateDateTime() {
        SimpleDateFormat timeFormat = new SimpleDateFormat("hh:mm a", Locale.getDefault());
        SimpleDateFormat dateFormat = new SimpleDateFormat("d MMM yy", Locale.getDefault());

        Date now = new Date();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(now);

        curHour = calendar.get(Calendar.HOUR_OF_DAY);

        timeString = timeFormat.format(now);
        dateString = dateFormat.format(now);

        updateBackGround();

        invalidate();
    }


    public void updateDateTime(int hour, int minute, int year, int month, int date) {
        SimpleDateFormat timeFormat = new SimpleDateFormat("hh:mm a", Locale.getDefault());
        SimpleDateFormat dateFormat = new SimpleDateFormat("d MMM yy", Locale.getDefault());

        Calendar calendar = Calendar.getInstance();
        calendar.set(year, month, date, hour, minute);

        Date now = calendar.getTime();

        timeString = timeFormat.format(now);
        dateString = dateFormat.format(now);

        curHour = calendar.get(Calendar.HOUR_OF_DAY);

        updateBackGround();

        invalidate();
    }

    private void updateBackGround() {
        //   setBackgroundResource(isDay() ? R.drawable.sun_day : R.drawable.moon_night);
    }

    private boolean isDay() {
        return curHour >= 5 && curHour < 18;
    }


    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        int widthMode = MeasureSpec.getMode(widthMeasureSpec);
        int widthSize = MeasureSpec.getSize(widthMeasureSpec);
        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
        int heightSize = MeasureSpec.getSize(heightMeasureSpec);

        // If the width or height is set to wrap_content, set a default size
        if (widthMode == MeasureSpec.AT_MOST) {
            widthSize = DEFAULT_WIDTH;
        }
        if (heightMode == MeasureSpec.AT_MOST) {
            heightSize = DEFAULT_HEIGHT;
        }

        super.onMeasure(MeasureSpec.makeMeasureSpec(widthSize, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(heightSize, MeasureSpec.EXACTLY));
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);

        float centerX = getWidth() / 2f;
        float centerY = getHeight() / 2f;

        float colonPos = hourPaint.measureText(timeString.split(":")[0]);
        float am_pmPos = hourPaint.measureText(timeString.split(" ")[0]);
        float datePos = datePaint.measureText(dateString);
        float am_pmPos2 = hourPaint.measureText(timeString.split(":")[1]) - hourPaint.measureText(timeString.split(" ")[1]);

        // Draw time
        canvas.drawText(timeString.split(":")[0], centerX - am_pmPos / 2 - 10, centerY - 10, hourPaint);
        canvas.drawText(":", centerX - am_pmPos / 2 + colonPos - 10, centerY - 10, colonPaint);
        canvas.drawText(timeString.split(":")[1].split(" ")[0], centerX - am_pmPos / 2 + colonPos + colonPaint.measureText(":") - 10, centerY - 10, minutePaint);

        //draw am-pm todo fix positioning at 04:16 pm -> poco x2
        canvas.drawText(timeString.split(" ")[1], centerX + am_pmPos2, centerY - am_pmPaint.getTextSize() - 10, am_pmPaint);

        // Draw date
        canvas.drawText(dateString, centerX - datePos / 2, centerY + hourPaint.getTextSize() - 5, datePaint);
    }
}

