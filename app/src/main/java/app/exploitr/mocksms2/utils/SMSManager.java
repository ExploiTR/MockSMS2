package app.exploitr.mocksms2.utils;

import android.content.ContentValues;
import android.content.Context;
import android.net.Uri;
import android.os.Build;
import android.provider.Telephony;
import android.telephony.SmsManager;

import app.exploitr.mocksms2.R;
import app.exploitr.mocksms2.data.PrefMan;

public class SMSManager {

    /**
     * Saves an SMS message with the provided details.
     *
     * @param phone_sender_receiver    the phone number of the sender or receiver of the SMS
     * @param message_to_be_saved      the content of the message to be saved
     * @param time_of_message_creation the time at which the message was created (in milliseconds)
     * @param checked_button_id        the ID of the checked button associated with the SMS mode
     */

    public static boolean saveSMS(Context context, String phone_sender_receiver, String message_to_be_saved, long time_of_message_creation, int checked_button_id) {
        PrefMan man = PrefMan.getInstance(context);
        boolean isRead = man.isSmsRead();
        boolean isSeen = man.isSmsSeen();
        boolean isDelivered = man.isSmsDelivered();
        boolean canReply = man.isReplyPathPresent();

        Uri message_mode = determineModeString(checked_button_id);
        int message_type = determineMessageType(checked_button_id);

        int status = isDelivered ? SmsManager.STATUS_ON_ICC_READ : man.getSmsStatus();
        int slot = man.getSimSlot();
        String imsi = man.getSimImsi();
        String service_center = man.getServiceCenterNumber(context);

        int time_diff = man.getTimeDifference();
        long received_time = time_of_message_creation + (long) time_diff * 60 * 1000;

        return saveSMSInternal(context, message_mode, phone_sender_receiver, message_to_be_saved, time_of_message_creation, received_time, isRead, slot, isSeen, message_type, canReply, service_center, status, imsi);
    }

    private static boolean saveSMSInternal(Context context, Uri message_mode, String address, String message, long creation_time, long received_time,
                                           boolean is_read, int sim_index, boolean is_seen, int message_type,
                                           boolean is_reply_path_present, String service_center, int status, String imsi) {
        ContentValues c_val = new ContentValues();
        c_val.put(Telephony.Sms.ADDRESS, address);
        c_val.put(Telephony.Sms.BODY, message);
        c_val.put(Telephony.Sms.DATE_SENT, creation_time);
        c_val.put(Telephony.Sms.DATE, received_time);
        c_val.put(Telephony.Sms.READ, is_read);
        c_val.put(Telephony.Sms.SUBSCRIPTION_ID, sim_index);
        c_val.put(Telephony.Sms.SEEN, is_seen);
        c_val.put(Telephony.Sms.TYPE, message_type);
        c_val.put(Telephony.Sms.REPLY_PATH_PRESENT, is_reply_path_present);
        c_val.put(Telephony.Sms.SERVICE_CENTER, service_center);
        c_val.put(Telephony.Sms.STATUS, status);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)
            c_val.put(Telephony.Sms.THREAD_ID, Telephony.Threads.getOrCreateThreadId(context, address));

        try {
            Uri insertedUri = context.getContentResolver().insert(message_mode, c_val);
            return insertedUri != null;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    private static Uri determineModeString(int mode) {
        if (mode == R.id.inbox_button) return Telephony.Sms.Inbox.CONTENT_URI;
        else if (mode == R.id.sent_button) return Telephony.Sms.Sent.CONTENT_URI;
        else if (mode == R.id.draft_button) return Telephony.Sms.Draft.CONTENT_URI;
        else if (mode == R.id.outbox_button) return Telephony.Sms.Outbox.CONTENT_URI;
        else if (mode == R.id.failed_button) return Uri.parse("content://sms/failed");
        else return Uri.parse("content://sms/queued");
    }

    private static int determineMessageType(int mode) {
        if (mode == R.id.inbox_button) return Telephony.Sms.MESSAGE_TYPE_INBOX;
        else if (mode == R.id.sent_button) return Telephony.Sms.MESSAGE_TYPE_SENT;
        else if (mode == R.id.draft_button) return Telephony.Sms.MESSAGE_TYPE_DRAFT;
        else if (mode == R.id.outbox_button) return Telephony.Sms.MESSAGE_TYPE_OUTBOX;
        else if (mode == R.id.failed_button) return Telephony.Sms.MESSAGE_TYPE_FAILED;
        else return Telephony.Sms.MESSAGE_TYPE_QUEUED;
    }
}

