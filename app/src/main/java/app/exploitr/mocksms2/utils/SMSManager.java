package app.exploitr.mocksms2.utils;

import android.content.ContentValues;
import android.content.Context;
import android.net.Uri;
import android.provider.Telephony;

import app.exploitr.mocksms2.R;
import app.exploitr.mocksms2.data.PrefMan;

public class SMSManager {

    /**
     * Saves an SMS message with the provided details.
     *
     * @param phone_sender_receiver    the phone number of the sender or receiver of the SMS
     * @param message_to_be_saved      the content of the message to be saved
     * @param time_of_message_creation the time at which the message was created (in milliseconds)
     * @param checked_button_id        the ID of the checked button associated with the SMS mode
     */

    public static void saveSMS(Context context, String phone_sender_receiver, String message_to_be_saved, long time_of_message_creation, int checked_button_id) {
        PrefMan man = PrefMan.getInstance(context);
        boolean isRead = man.isSmsRead();
        boolean isSeen = man.isSmsSeen();
        boolean isDelivered = man.isSmsDelivered();
        boolean canReply = man.isReplyPathPresent();

        Uri message_mode = determineModeString(checked_button_id);

        int status = man.getSmsStatus();
        int slot = man.getSimSlot();
        String imsi = man.getSimImsi();
        String service_center = man.getServiceCenterNumber(context);
        int time_diff = man.getTimeDifference();

    }

    private static boolean saveSMSInternal(Context context, String address, String message, String creation_time, String received_time,
                                           int is_read, int is_seen, int message_type) {
        ContentValues contentValues = new ContentValues();
        contentValues.put(Telephony.Sms.ADDRESS, "+916306120482");
        contentValues.put(Telephony.Sms.BODY, "testHi");
        contentValues.put(Telephony.Sms.DATE, System.currentTimeMillis());
        contentValues.put(Telephony.Sms.READ, 0);
        contentValues.put(Telephony.Sms.SUBSCRIPTION_ID, 0);
        contentValues.put(Telephony.Sms.TYPE, Telephony.Sms.MESSAGE_TYPE_INBOX);

        try {
            return context.getContentResolver().insert(Telephony.Sms.CONTENT_URI, contentValues) != null;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    private static Uri determineModeString(int mode) {
        if (mode == R.id.inbox_button) return Telephony.Sms.Inbox.CONTENT_URI;
        else if (mode == R.id.sent_button) return Telephony.Sms.Sent.CONTENT_URI;
        else if (mode == R.id.draft_button) return Telephony.Sms.Draft.CONTENT_URI;
        else if (mode == R.id.outbox_button) return Telephony.Sms.Outbox.CONTENT_URI;
        else if (mode == R.id.failed_button) return Uri.parse("content://sms/failed");
        else return Uri.parse("content://sms/queued");
    }
}

